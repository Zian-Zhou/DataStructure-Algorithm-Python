#限制条件：无。和前一题不同，可以完成多笔交易。


'''
给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。

设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。

注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

示例 1:

输入: [7,1,5,3,6,4]
输出: 7
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。
示例 2:

输入: [1,2,3,4,5]
输出: 4
解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。
     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
示例 3:

输入: [7,6,4,3,1]
输出: 0
解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。
'''


#解法：
'''
其实就是要找到每一段上升的子序列。而第一步就是确定每一段的开头，也是每一段的最小值。
既然如此，只需要遍历一次，每次比较当前价格与之前价格，
	如果小于先前的价格，说明这是一段新的子序列开头；
	如果大于先前的价格，说明当前处于某一段上升序列之中。
怎么求最终的收益，有两种想法，一种是每次都记录每一段的最小值，然后算最大收益，再累加起来；
另一种想法就是每次价格上升就把这一天上升产生的利润累加起来，也就是maxProfit+=prices[i]-prices[i-1]
'''
def maxProfit(prices):
	maxProfit = 0
	for i in range(1,len(prices)):
		if prices[i]>prices[i-1]:
			maxProfit += prices[i]-prices[i-1]
	return maxProfit

